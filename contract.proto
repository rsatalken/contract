syntax = "proto3";

package contract;
option go_package = "github.com/rsatalken/contract";

service RsaTalken {
  rpc Register(Register.Request) returns (Register.Response);
  rpc Unregister(Unregister.Request) returns (Unregister.Response);
  rpc ListAccounts(ListAccounts.Request) returns (ListAccounts.Response);
  rpc SendMessage(SendMessage.Request) returns (SendMessage.Response);
  rpc GetMessages(GetMessages.Request) returns (GetMessages.Response);
}

message AccountDTO {
  int64 id = 1;
  string display_name = 2;
  bytes public_key = 3;
  int64 registration_timestamp = 4;
  int64 last_activity_timestamp = 5;
}

message MessageDTO {
  int64 id = 1;
  MessageType type = 2;
  int64 from = 3;
  int64 to = 4;
  bytes body = 5;
  repeated MediaDTO media = 6;
  int64 timestamp = 7;
}

enum MessageType {
  MessageType_REGULAR = 0;
  MessageType_INVITE = 1;
}

message RegularMessageBodyDTO {
  bytes text = 1;
}

message InviteMessageBodyDTO {
  int64 group_id = 1;
  bytes group_key = 2;
}

message MediaDTO {
  string content_type = 1;
  bytes body = 2;
}

message Register {
  message Request {
    bytes public_key = 1;
    string display_name = 2;
  }
  message Response {
    AccountDTO account = 1;
  }
}

message Unregister {
  message Request {
    bytes public_key = 1;
  }
  message Response {}
}

message ListAccounts {
  message Request {
    int64 last_account_id = 1;
    int32 limit = 2;
  }
  message Response {
    repeated AccountDTO accounts = 1;
  }
}

message SendMessage {
  message Request {
    MessageType type = 1;
    int64 to = 2;
    bytes body = 3;
    repeated MediaDTO media = 4;
  }
  message Response {
    MessageDTO message = 1;
  }
}

message GetMessages {
  message Request {
    int64 last_message_id = 1;
    int32 limit = 2;
  }
  message Response {
    repeated MessageDTO messages = 1;
  }
}