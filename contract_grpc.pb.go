// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: contract.proto

package contract

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RsaTalken_Register_FullMethodName     = "/contract.RsaTalken/Register"
	RsaTalken_Unregister_FullMethodName   = "/contract.RsaTalken/Unregister"
	RsaTalken_ListAccounts_FullMethodName = "/contract.RsaTalken/ListAccounts"
	RsaTalken_SendMessage_FullMethodName  = "/contract.RsaTalken/SendMessage"
	RsaTalken_GetMessages_FullMethodName  = "/contract.RsaTalken/GetMessages"
)

// RsaTalkenClient is the client API for RsaTalken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RsaTalkenClient interface {
	Register(ctx context.Context, in *Register_Request, opts ...grpc.CallOption) (*Register_Response, error)
	Unregister(ctx context.Context, in *Unregister_Request, opts ...grpc.CallOption) (*Unregister_Response, error)
	ListAccounts(ctx context.Context, in *ListAccounts_Request, opts ...grpc.CallOption) (*ListAccounts_Response, error)
	SendMessage(ctx context.Context, in *SendMessage_Request, opts ...grpc.CallOption) (*SendMessage_Response, error)
	GetMessages(ctx context.Context, in *GetMessages_Request, opts ...grpc.CallOption) (*GetMessages_Response, error)
}

type rsaTalkenClient struct {
	cc grpc.ClientConnInterface
}

func NewRsaTalkenClient(cc grpc.ClientConnInterface) RsaTalkenClient {
	return &rsaTalkenClient{cc}
}

func (c *rsaTalkenClient) Register(ctx context.Context, in *Register_Request, opts ...grpc.CallOption) (*Register_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Register_Response)
	err := c.cc.Invoke(ctx, RsaTalken_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsaTalkenClient) Unregister(ctx context.Context, in *Unregister_Request, opts ...grpc.CallOption) (*Unregister_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Unregister_Response)
	err := c.cc.Invoke(ctx, RsaTalken_Unregister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsaTalkenClient) ListAccounts(ctx context.Context, in *ListAccounts_Request, opts ...grpc.CallOption) (*ListAccounts_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccounts_Response)
	err := c.cc.Invoke(ctx, RsaTalken_ListAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsaTalkenClient) SendMessage(ctx context.Context, in *SendMessage_Request, opts ...grpc.CallOption) (*SendMessage_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessage_Response)
	err := c.cc.Invoke(ctx, RsaTalken_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rsaTalkenClient) GetMessages(ctx context.Context, in *GetMessages_Request, opts ...grpc.CallOption) (*GetMessages_Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessages_Response)
	err := c.cc.Invoke(ctx, RsaTalken_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RsaTalkenServer is the server API for RsaTalken service.
// All implementations must embed UnimplementedRsaTalkenServer
// for forward compatibility.
type RsaTalkenServer interface {
	Register(context.Context, *Register_Request) (*Register_Response, error)
	Unregister(context.Context, *Unregister_Request) (*Unregister_Response, error)
	ListAccounts(context.Context, *ListAccounts_Request) (*ListAccounts_Response, error)
	SendMessage(context.Context, *SendMessage_Request) (*SendMessage_Response, error)
	GetMessages(context.Context, *GetMessages_Request) (*GetMessages_Response, error)
	mustEmbedUnimplementedRsaTalkenServer()
}

// UnimplementedRsaTalkenServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRsaTalkenServer struct{}

func (UnimplementedRsaTalkenServer) Register(context.Context, *Register_Request) (*Register_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRsaTalkenServer) Unregister(context.Context, *Unregister_Request) (*Unregister_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedRsaTalkenServer) ListAccounts(context.Context, *ListAccounts_Request) (*ListAccounts_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedRsaTalkenServer) SendMessage(context.Context, *SendMessage_Request) (*SendMessage_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRsaTalkenServer) GetMessages(context.Context, *GetMessages_Request) (*GetMessages_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedRsaTalkenServer) mustEmbedUnimplementedRsaTalkenServer() {}
func (UnimplementedRsaTalkenServer) testEmbeddedByValue()                   {}

// UnsafeRsaTalkenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RsaTalkenServer will
// result in compilation errors.
type UnsafeRsaTalkenServer interface {
	mustEmbedUnimplementedRsaTalkenServer()
}

func RegisterRsaTalkenServer(s grpc.ServiceRegistrar, srv RsaTalkenServer) {
	// If the following call pancis, it indicates UnimplementedRsaTalkenServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RsaTalken_ServiceDesc, srv)
}

func _RsaTalken_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Register_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaTalkenServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RsaTalken_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaTalkenServer).Register(ctx, req.(*Register_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RsaTalken_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unregister_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaTalkenServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RsaTalken_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaTalkenServer).Unregister(ctx, req.(*Unregister_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RsaTalken_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccounts_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaTalkenServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RsaTalken_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaTalkenServer).ListAccounts(ctx, req.(*ListAccounts_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RsaTalken_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessage_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaTalkenServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RsaTalken_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaTalkenServer).SendMessage(ctx, req.(*SendMessage_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RsaTalken_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessages_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RsaTalkenServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RsaTalken_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RsaTalkenServer).GetMessages(ctx, req.(*GetMessages_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RsaTalken_ServiceDesc is the grpc.ServiceDesc for RsaTalken service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RsaTalken_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contract.RsaTalken",
	HandlerType: (*RsaTalkenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RsaTalken_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _RsaTalken_Unregister_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _RsaTalken_ListAccounts_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _RsaTalken_SendMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _RsaTalken_GetMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract.proto",
}
